# Create component
rcc:
  description: Create a React.js component
  tpl:
    next: |
      import React, {
        PropTypes,
      } from 'react';

      const $class$ = React.createClass({
        render() {
          return (
            <div>$END$</div>
          );
        }
      });

      export default $class$;

    es5: |
      'use strict';

      var React = require('react');
      var PropTypes = React.PropTypes;

      var $class$ = React.createClass({
        render: function() {
          return (
            <div>$END$</div>
          );
        }
      });

      module.exports = $class$;

  variables:
    - {name: 'class', expression: 'complete()'}

# https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#plain-javascript-classes
rcls:
  description: Create a ES2015 class
  tpl: |
    import React, {
      Component,
      PropTypes,
    } from 'react';

    class $class$ extends Component {
      render() {
        return (
          <div>$END$</div>
        );
      }
    }

    $class$.propTypes = {};
    $class$.defaultProps = {};

    export default $class$;

  variables:
    - {name: 'class', expression: 'complete()'}

# Import react-dom
rdom:
  description: import ReactDOM
  tpl:
    next: |
      import ReactDOM from 'react-dom';
      $END$

    es5: |
      var ReactDOM = require('react-dom');
      $END$

# Nested component
rccc:
  description: Create a sub component
  tpl: |
    $START$ = React.createClass({
      render: function() {
        return (
          $END$
        );
      }
    });

  variables:
    - {name: 'START'}

# cdm
cdm:
  description: componentDidMount
  tpl: |
    componentDidMount: function() {
      $END$
    },

# cdu
cdu:
  description: componentDidUpdate
  tpl: |
    componentDidUpdate: function(prevProps, prevState, prevContext) {
      $END$
    },

# cwm
cwm:
  description: componentWillMount
  tpl: |
    componentWillMount: function() {
      $END$
    },

# cwr
cwr:
  description: componentWillReceiveProps
  tpl: |
    componentWillReceiveProps: function(nextProps, nextContext) {
      $END$
    },

#cwu
cwu:
  description: componentWillUpdate
  tpl: |
    componentWillUpdate: function(nextProps, nextState, nextContext) {
      $END$
    },

#cwum
cwum:
  description: componentWillUnmount
  tpl: |
    componentWillUnmount: function() {
      $END$
    },

# displayName
dn:
  description: displayName
  tpl: "displayName: '$END$',"

dnp:
  description: displayName as a property
  tpl: "$START$.displayName = '$END$';"
  variables:
    - {name: 'START'}

# ReactDOM.findDOMNode
fdn:
  description: findDOMNode
  tpl: findDOMNode($END$);

rfdn:
  description: ReactDOM.findDOMNode
  tpl: ReactDOM.findDOMNode($END$);

fup:
  description: forceUpdate();
  tpl: forceUpdate($END$);

#gdp
gdp:
  description: getDefaultProps
  tpl: |
    getDefaultProps: function() {
      return {
        $END$
      };
    },

# getInitialState
gis:
  description: getInitialState
  tpl: |
    getInitialState: function() {
      return {
        $START$: $END$
      };
    },

  variables:
    - {name: 'START'}

# isMounted
ism:
  tpl: isMounted()

#
props:
  tpl: this.props

# set inner HTML
dsih:
  description: dangerouslySetInnerHTML
  tpl: "dangerouslySetInnerHTML={{__html: '$END$'}}"

# propTypes
pts:
  description: propTypes
  tpl: |
    propTypes: {
      $START$: PropTypes.$END$,
    },

  variables:
    - {name: 'START'}

# PropType
pt:
  description: PropTypes.
  tpl: "$START$: PropTypes.$END$,"
  variables:
    - {name: 'START'}

refs:
  tpl: this.refs.$END$

# render
ren:
  description: render()
  tpl: |
    render: function() {
      return (
        <div>$END$</div>
      );
    }

# shouldComponentUpdate
scu:
  description: shouldComponentUpdate
  tpl: |
    shouldComponentUpdate: function(nextProps, nextState, nextContext) {
      $END$
    },

# sst
sst:
  description: this.setState
  tpl: |
    this.setState({
      $START$: $END$,
    });
  variables:
    - {name: 'START'}

#
state:
  tpl: this.state.$END$

# context
ct:
  description: contextTypes
  tpl: |
    contextTypes: {
      $START$: PropTypes.$END$,
    },

  variables:
    - {name: 'START'}

# childContextTypes
cct:
  description: childContextTypes
  tpl: |
    childContextTypes: {
      $START$: PropTypes.$END$,
    },

  variables:
    - {name: 'START'}

# this.context
ctx:
  description: this.context
  tpl: this.context.$END$

# getChildContext
gcc:
  description: getChildContext
  tpl: |
    getChildContext: function() {
      return {
        $START$: $END$
      };
    },

  variables:
    - {name: 'START'}


# static

# static propTypes
sdn:
  description: static displayName
  tpl: static displayName = '$END$';

spt:
  description: static propTypes
  tpl: |
    static propTypes = {
      $START$: PropTypes.$END$,
    };

  variables:
    - {name: 'START'}

# static defaultProps
sdp:
  description: static defaultProps
  tpl: |
    static defaultProps = {
      $START$: PropTypes.$END$,
    };

  variables:
    - {name: 'START'}

# static context
sct:
  description: static contextTypes
  tpl: |
    static contextTypes = {
      $START$: PropTypes.$END$,
    };

  variables:
    - {name: 'START'}

# static childContextTypes
scct:
  description: static childContextTypes
  tpl: |
    static childContextTypes = {
      $START$: PropTypes.$END$,
    };

  variables:
    - {name: 'START'}

# constructor
cstt:
  description: constructor(props, context)
  tpl: |
    constructor(props, context$START$) {
      super(props, context$END$);
    }

  variables:
    - {name: 'START'}

# transition add-on
tsn:
  description: transitionName
  tpl: transitionName="$END$"

tsa:
  description: transitionAppear
  tpl: transitionAppear={$END$}

tse:
  description: transitionEnter
  tpl: transitionEnter={$END$}

tsl:
  description: transitionLeave
  tpl: transitionLeave={$END$}

tset:
  description: transitionEnterTimeout
  tpl: transitionEnterTimeout={$END$}

tslt:
  description: transitionLeaveTimeout
  tpl: transitionLeaveTimeout={$END$}

tsat:
  description: transitionAppearTimeout
  tpl: transitionAppearTimeout={$END$}
